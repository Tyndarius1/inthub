/* Target the modal content */
#createUserModal .modal-content {
  max-width: 600px;
  width: 90vw;
  max-height: 85vh;
  overflow-y: auto;
  padding: 2rem 2.5rem;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 8px 24px rgba(0,0,0,0.15);
  position: relative;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  display: flex;
  flex-direction: column;
}

/* Make the User Type fieldset full width and separate */
#createUserForm > fieldset:first-of-type {
  margin-bottom: 1.5rem;
  width: 100%;
}

/* Style the select inside User Type nicely */
#createUserForm > fieldset:first-of-type select {
  width: 100%;
  padding: 0.5rem 0.75rem;
  font-size: 1rem;
  border-radius: 4px;
  border: 1px solid #bbb;
}

/* The next fieldset (student or employer) is hidden/displayed, no changes here */

/* Target the 2nd fieldset (Student Information) and Employer fields */
/* But the problem: Name, Email, Password, and Confirm Password are inside these fieldsets individually */
/* So to specifically style those 4 inputs as a grid: we need to target those labels */
/* Your Name, Email, Password, and Confirm Password labels have inputs inside the first few labels in each fieldset */

/* Instead, let's style all labels of the first 4 inputs to be 4 columns */

/* We'll do a trick: find the first 4 labels inside createUserForm that contain inputs named 'name', 'email', 'password', 'password_confirmation' */
/* Then make them a grid row */

/* So wrap the 4 labels in a grid: but your HTML has them directly in fieldsets. */
/* We'll do this with CSS grid and use :nth-child selectors */

/* Make the parent of those 4 labels a grid container */
/* But your HTML has no wrapper around those 4 labels, so we can't do that easily. */

/* Alternative: Use grid on the fieldset and make only the first 4 labels grid items */
/* But that would affect all other labels. */

/* Better approach: Use a CSS Grid on the fieldsets but assign the first 4 labels grid-column span 1 each, the rest full width */

/* So: */

#studentFields, #employerFields {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem 1.5rem;
}

#studentFields label:nth-child(n + 5),
#employerFields label:nth-child(n + 5) {
  grid-column: span 4;
}

/* Now the first 4 labels in each fieldset are each 1 column, rest span all 4 columns */

/* We want the 4 fields: Name, Email, Password, Confirm Password to be on the same row */
/* But actually your Name, Email, Password, Confirm Password are split between the two fieldsets */
/* Wait, your HTML has them inside each fieldset â€” oh no, they are split: for Student, Name, Email, Password, Confirm Password are in Student Fields */
/* For Employer, they are in Employer Fields */

/* Perfect! This works per fieldset! */

/* Style labels and inputs */
#createUserForm label {
  display: flex;
  flex-direction: column;
  font-size: 0.95rem;
  color: #333;
  font-weight: 500;
}

#createUserForm input,
#createUserForm select,
#createUserForm textarea {
  margin-top: 0.3rem;
  padding: 0.5rem 0.75rem;
  border: 1px solid #bbb;
  border-radius: 4px;
  font-size: 1rem;
  font-family: inherit;
  width: 100%;
  box-sizing: border-box;
}

#createUserForm input:focus,
#createUserForm select:focus,
#createUserForm textarea:focus {
  outline: none;
  border-color: #4a90e2;
  box-shadow: 0 0 4px #4a90e2;
}

#createUserForm textarea {
  resize: vertical;
  min-height: 80px;
}

/* Submit button style */
#createUserForm button[type="submit"] {
  background-color: #4a90e2;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  font-size: 1.1rem;
  border-radius: 6px;
  cursor: pointer;
  align-self: center;
  min-width: 140px;
  transition: background-color 0.3s ease-in-out;
  margin-top: 1rem;
}

#createUserForm button[type="submit"]:hover {
  background-color: #357ABD;
}

/* Responsive: on smaller screens stack all labels full width */
@media (max-width: 700px) {
  #studentFields, #employerFields {
    grid-template-columns: 1fr !important;
  }

  #studentFields label:nth-child(n + 5),
  #employerFields label:nth-child(n + 5) {
    grid-column: auto !important;
  }
}
